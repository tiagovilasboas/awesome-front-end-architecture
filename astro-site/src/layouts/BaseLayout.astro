---
import "../styles/global.css";

const { title } = Astro.props;

const nav = [
  { href: "/overview", label: "Overview" },
  { href: "/principles", label: "Principles" },
  { href: "/component-architecture", label: "Components" },
  { href: "/styles", label: "Styles" },
  { href: "/state", label: "State" },
  { href: "/structure", label: "Structure" },
  { href: "/testing", label: "Testing" },
  { href: "/anti-patterns", label: "Anti-patterns" },
  { href: "/examples", label: "Examples" },
  { href: "/references", label: "References" },
  { href: "/concepts", label: "Concepts" },
  { href: "/about", label: "About" },
  { href: "/architects", label: "Architects" }
];
const current = Astro.url.pathname;
const currentIndex = nav.findIndex((n) => n.href === current);
const prev = currentIndex > 0 ? nav[currentIndex - 1] : undefined;
const next = currentIndex >= 0 && currentIndex < nav.length - 1 ? nav[currentIndex + 1] : undefined;
---
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title ?? 'Awesome Front-End Architecture'}</title>
    <link rel="icon" href="/favicon.svg" />
  </head>
  <body class="font-sans antialiased text-gray-900 bg-white dark:bg-gray-900 dark:text-gray-100">
    <header class="sticky top-0 z-50 bg-gradient-to-r from-brand-light via-white to-brand-light dark:from-gray-900/80 dark:via-gray-900/80 dark:to-gray-900/80 backdrop-blur border-b border-gray-200 dark:border-gray-800">
      <div class="max-w-5xl mx-auto flex items-center justify-between px-4 py-3">
        <a href="/" class="text-lg font-semibold">üß± Awesome FE Architecture</a>
        <div class="flex gap-2 items-center">
          <button id="dark-toggle" class="p-2 rounded focus:outline-none focus:ring" aria-label="Toggle Dark Mode">
            <svg id="icon-sun" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden dark:block" viewBox="0 0 24 24" fill="currentColor"><path d="M12 18a6 6 0 100-12 6 6 0 000 12z"/><path fill-rule="evenodd" d="M12 2a.75.75 0 01.75.75V4a.75.75 0 01-1.5 0V2.75A.75.75 0 0112 2zm0 18a.75.75 0 01.75.75V22a.75.75 0 01-1.5 0v-1.25a.75.75 0 01.75-.75zm10-8a.75.75 0 01-.75.75H20a.75.75 0 010-1.5h1.25A.75.75 0 0122 12zM4 12a.75.75 0 01-.75.75H2a.75.75 0 010-1.5h1.25A.75.75 0 014 12zm14.95 6.364a.75.75 0 01-1.06 1.06l-.884-.884a.75.75 0 011.06-1.06l.884.884zm-12.02-12.02a.75.75 0 01-1.06 1.06l-.884-.884a.75.75 0 111.06-1.06l.884.884zm12.02 0l-.884-.884a.75.75 0 111.06-1.06l.884.884a.75.75 0 11-1.06 1.06zM6.05 17.95l-.884.884a.75.75 0 11-1.06-1.06l.884-.884a.75.75 0 011.06 1.06z" clip-rule="evenodd"/></svg>
            <svg id="icon-moon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 dark:hidden" viewBox="0 0 24 24" fill="currentColor"><path d="M21.752 15.002A9.718 9.718 0 0112 22c-5.523 0-10-4.477-10-10 0-4.555 3.064-8.414 7.252-9.662a.75.75 0 01.931.931A8.218 8.218 0 0012 12c0 4.523 3.477 8 8 8a8.218 8.218 0 004.731-1.817.75.75 0 01.931.931z"/></svg>
          </button>

          <button id="menu-toggle" class="md:hidden p-2 rounded focus:outline-none focus:ring" aria-label="Menu">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" /></svg>
          </button>
        </div>
         <nav class="hidden md:flex flex-wrap gap-2 text-sm">
          {nav.map((item) => (
            <a
              href={item.href}
              class={`px-2 py-1 rounded hover:underline ${current === item.href ? 'font-semibold text-brand dark:text-brand-dark underline' : ''}`}
            >
              {item.label}
            </a>
          ))}
        </nav>
      </div>
        {/* Mobile nav */}
        <nav id="mobile-nav" class="hidden md:hidden flex flex-col gap-2 px-4 pb-4 text-sm absolute top-full left-0 w-full bg-white dark:bg-gray-900 shadow-lg transition-transform transform origin-top">
          {nav.map((item) => (
            <a
              href={item.href}
              class={`px-2 py-1 rounded hover:bg-brand-light dark:hover:bg-gray-800 ${current === item.href ? 'font-semibold text-brand dark:text-brand-dark' : ''}`}
            >
              {item.label}
            </a>
          ))}
        </nav>
    </header>
    <main class="container mx-auto px-4 py-8 flex gap-8">
      <article class="prose prose-slate dark:prose-invert max-w-none flex-1" id="article-content">
        <slot />
      </article>
      <aside id="toc" class="hidden lg:block w-56 shrink-0 sticky top-28 max-h-[calc(100vh-7rem)] overflow-y-auto text-sm border-l border-gray-200 dark:border-gray-700 pl-4"></aside>
      <nav class="flex justify-between mt-12 text-sm w-full">
        {prev ? <a href={prev.href} class="text-brand dark:text-brand-dark hover:underline">‚Üê {prev.label}</a> : <span />}
        {next ? <a href={next.href} class="text-brand dark:text-brand-dark hover:underline">{next.label} ‚Üí</a> : <span />}
      </nav>
    </main>
    <footer class="mt-16 py-8 text-center text-sm text-gray-500">
      ¬© {new Date().getFullYear()} Awesome Front-End Architecture
    </footer>
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const btn = document.getElementById('menu-toggle');
      const nav = document.getElementById('mobile-nav');
      if (btn && nav) {
        btn.addEventListener('click', () => {
          nav.classList.toggle('hidden');
        });
        nav.querySelectorAll('a').forEach(link => {
          link.addEventListener('click', () => nav.classList.add('hidden'));
        });
      }
      const darkToggle = document.getElementById('dark-toggle');
      const rootEl = document.documentElement;
      if (darkToggle) {
        const setMode = (dark) => {
          if (dark) {
            rootEl.classList.add('dark');
          } else {
            rootEl.classList.remove('dark');
          }
        };
        // init based on localStorage or prefers
        const stored = localStorage.getItem('theme');
        if (stored) {
          setMode(stored === 'dark');
        } else {
          setMode(window.matchMedia('(prefers-color-scheme: dark)').matches);
        }
        darkToggle.addEventListener('click', () => {
          const isDark = rootEl.classList.toggle('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
      }

      // Table of contents
      const article = document.getElementById('article-content');
      const tocEl = document.getElementById('toc');
      if (article && tocEl) {
        const headings = article.querySelectorAll('h2, h3');
        const list = document.createElement('ul');
        headings.forEach((h) => {
          if (!h.id) return;
          const li = document.createElement('li');
          li.className = h.tagName === 'H2' ? 'mt-2 font-semibold' : 'ml-4';
          const a = document.createElement('a');
          a.href = `#${h.id}`;
          a.textContent = h.textContent;
          a.className = 'hover:underline';
          li.appendChild(a);
          list.appendChild(li);
        });
        tocEl.appendChild(list);
        if (headings.length) tocEl.classList.remove('hidden');
      }

    });
  </script>
  </body>
</html>